#include "tcpserver.h"
#include "qtcpsocketwrapper.h"

TCPServer::TCPServer(QObject *parent ) : QTcpServer(parent)
{
}

void TCPServer::stopServer()
{
    close();
    qDebug() << "server was stoped.";
    emit(sendMessageToBottom(MessageType::DELETE_TCP_CLIENT_THREAD_OBJECT));

}

void TCPServer::startServer()
{
    qDebug() << "start a server on port " << server_port;
    if(!this->listen(QHostAddress::Any, server_port))
    {
        qDebug() << "Could not start server";

    }
    else
    {
        qDebug() << "Listening incoming connections...";

    }
    //    qDebug() << "Server IP address is:" << this->serverAddress() << ". Server port is: " << this->serverPort();

}

void TCPServer::incomingConnection(int socketDescriptor)
{
    // create and forget about this object
    QTcpSocketWrapper * tcp_socket = new QTcpSocketWrapper();
    tcp_socket->setSocketDescriptor(socketDescriptor);
    qDebug() << tcp_socket->peerAddress().toString() << " "
             << tcp_socket->peerPort()
             <<" from incommingConnection";
    qDebug() << QThread::currentThreadId() << "incommingConnection";
    qDebug() << socketDescriptor << " is trying to connect...";
    TCP_client_thread * thread = new TCP_client_thread(tcp_socket, socketDescriptor, this);
    emit(sendMessageToTop(MessageType::SET_CLIENT_IP_AND_PORT, tcp_socket->peerAddress().toString() + " " + QString::number(tcp_socket->peerPort())));
    thread->setSocketIpAddress(tcp_socket->peerAddress().toString());
    thread->setSocketPort(QString::number(tcp_socket->peerPort()));
//    connect(thread, SIGNAL(finished()), thread, SLOT(deleteLater()));
    connect(this, SIGNAL(sendMessageToBottom(MessageTypes, QString)), thread, SLOT(getMessageForBottom(MessageTypes, QString)));
    connect(thread, SIGNAL(sendMessageToTop(MessageTypes, QString)), this, SLOT(getMessageForTop(MessageTypes, QString)));
    thread->start();

}

int TCPServer::getServer_port() const
{
    return server_port;

}

void TCPServer::setServer_port(int value)
{
    server_port = value;

}

void TCPServer::getMessageForTop(MessageType messageType, QString message)
{
    emit(sendMessageToTop(messageType, message));

}

void TCPServer::getMessageForBottom(MessageType messageType, QString data)
{
    if(messageType == MessageType::SEND_XML_PARAMETERS_TO_CLIENTS)
    {
        savedMessageForClient = data;
        emit(sendMessageToBottom(messageType, data));
    }
}
