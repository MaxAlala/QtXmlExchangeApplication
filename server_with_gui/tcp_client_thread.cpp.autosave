#include "tcp_client_thread.h"

TCP_client_thread::TCP_client_thread(QTcpSocketWrapper * tcp_socket, const int socketDescriptor, QObject *parent) :
    QThread(parent)
{
    this->socketDescriptor = socketDescriptor;
    // moveToThread must be before calling connect!
    tcp_socket->moveToThread(this);
    socket = tcp_socket;

}

void TCP_client_thread::run()
{
    qDebug() << QThread::currentThreadId() << "run";
    qDebug() <<QThread::thread();

    // socket reads and sends data to the main thread
    connect(socket, SIGNAL(readyRead()), socket, SLOT(readyRead()));

    //sends messages to a socket
    connect(this, SIGNAL(sendMessageToBottom(MessageTypes, QString)), socket, SLOT(getMessageForBottom(MessageTypes, QString)));

    //socket sends messages to the top layers
    connect(socket, SIGNAL(sendMessageToTop(MessageTypes, QString)), this, SLOT(getMessageForTop(MessageTypes, QString)));

    connect(socket, SIGNAL(disconnected()), this, SLOT(quit()));

    // when run is finished
    connect(this, SIGNAL(finished()), this, SLOT(deleteThreadObject()));

    qDebug() << socketDescriptor << " Client connected.";
    exec();

}

void TCP_client_thread::deleteThreadObject()
{
    emit(sendMessageToTop(MessageType::DELETE_IP_AND_PORT, getSocketIpAddress() + " " + getSocketPort()));
    deleteLater();
}

void TCP_client_thread::getMessageForTop(MessageType messageType, QString message)
{
    emit(sendMessageToTop(messageType, message));
}

void TCP_client_thread::getMessageForBottom(MessageType messageType, QString message)
{
    qDebug() << QThread::currentThreadId() << "sending a message to all client.";
    // queued connection?
    //QObject: Cannot create children for a parent that is in a different thread.
    //Parent is QNativeSocketEngine(0x30297a0),
    //parent's thread is TCP_client_thread(0x30e4700==new thread), current thread is QThread(0x2e65e30==main thread)
    //    socket->write(data.toAscii());
    if(messageType == MessageType::SEND_XML_PARAMETERS_TO_CLIENTS)
        emit(sendMessageToBottom(messageType, message));

    // a case where the stop server button was pressed.
    //That will ask a socket to delete itself.
    //If socket will be deleted then thread will be deleted also
    else if(messageType == MessageType::DELETE_TCP_CLIENT_THREAD_OBJECT)
        emit(sendMessageToBottom(MessageType::DELETE_TCP_CLIENT_THREAD_OBJECT));


}

QString TCP_client_thread::getSocketPort() const
{
    return socketPort;

}

void TCP_client_thread::setSocketPort(const QString &value)
{
    socketPort = value;

}

QString TCP_client_thread::getSocketIpAddress() const
{
    return socketIpAddress;

}

void TCP_client_thread::setSocketIpAddress(const QString &value)
{
    socketIpAddress = value;

}
